[project]
name = "pyright-mcp"
version = "1.1.0"
description = "MCP server for Python type checking with Pyright"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "mcp[cli]>=1.3.0",
    "pydantic>=2.0.0",
    "pathspec>=0.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "python-semantic-release>=8.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
pyright-mcp = "pyright_mcp.main:main"

[tool.pyright]
include = ["src"]
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.10"
typeCheckingMode = "standard"

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "I", "W"]
ignore = ["E501"]

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
build_command = "pip install build && python -m build"
dist_path = "dist/"
upload_to_vcs_release = true

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates/"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "^Merge",
    "^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\\(.+\\))?!?: ",
]

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "refactor", "revert", "style", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]